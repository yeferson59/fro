// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  user User[]

  @@map("role")
}

model User {
  id            String          @id @default(uuid())
  name          String?
  lastName      String?         @map("last_name")
  username      String?
  password      String?
  email         String          @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  roleId        Int             @default(1) @map("role_id")
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("user")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("session")
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credencial_public_key")
  counter              Int
  credentialDeviceType String  @map("credetial_device_type")
  credentialBackedUp   Boolean @map("credential_backend_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}
